"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.trackWithRetry = exports.shouldStopRetry = exports.processTestRun = void 0;
const types_1 = require("../types");
const getErrorMessage = (testRunResponse) => {
    switch (testRunResponse.status) {
        case types_1.TestStatus.new: {
            return `No baseline: ${testRunResponse.url}`;
        }
        case types_1.TestStatus.unresolved: {
            return `Difference found: ${testRunResponse.url}`;
        }
    }
};
const processTestRun = (testRunResponse, enableSoftAssert) => {
    const errorMessage = getErrorMessage(testRunResponse);
    if (errorMessage) {
        if (enableSoftAssert) {
            // eslint-disable-next-line no-console
            console.error(errorMessage);
        }
        else {
            throw new Error(errorMessage);
        }
    }
};
exports.processTestRun = processTestRun;
const shouldStopRetry = (result) => result.status !== types_1.TestStatus.unresolved;
exports.shouldStopRetry = shouldStopRetry;
const trackWithRetry = (trackFn, retryLimit = 2, enableSoftAssert) => __awaiter(void 0, void 0, void 0, function* () {
    const result = yield trackFn();
    if (retryLimit <= 0 || (0, exports.shouldStopRetry)(result)) {
        (0, exports.processTestRun)(result, enableSoftAssert);
        return result;
    }
    // eslint-disable-next-line no-console
    console.info(`Diff found... Remaining retry attempts **${retryLimit}**`);
    return (0, exports.trackWithRetry)(trackFn, retryLimit - 1, enableSoftAssert);
});
exports.trackWithRetry = trackWithRetry;
