"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VisualRegressionTracker = void 0;
const axios_1 = __importDefault(require("axios"));
const testRunResult_1 = __importDefault(require("./testRunResult"));
const helpers_1 = require("./helpers");
class VisualRegressionTracker {
    constructor(explicitConfig) {
        this.config = {
            apiUrl: "",
            apiKey: "",
            project: "",
            branchName: "",
        };
        this.buildId = "";
        this.projectId = "";
        if (explicitConfig) {
            this.config = explicitConfig;
        }
        else {
            this.config = (0, helpers_1.readConfigFromFile)(this.config);
            this.config = (0, helpers_1.readConfigFromEnv)(this.config);
        }
        (0, helpers_1.validateConfig)(this.config);
        this.axiosConfig = {
            headers: {
                apiKey: this.config.apiKey,
                project: this.config.project,
            },
        };
    }
    isStarted() {
        return !!this.buildId && !!this.projectId;
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            const data = {
                branchName: this.config.branchName,
                baselineBranchName: this.config.baselineBranchName,
                project: this.config.project,
                ciBuildId: this.config.ciBuildId,
            };
            return axios_1.default
                .post(`${this.config.apiUrl}/builds`, data, this.axiosConfig)
                .then(this.handleResponse)
                .catch(this.handleException)
                .then((build) => {
                this.buildId = build.id;
                this.projectId = build.projectId;
                return build;
            });
        });
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.isStarted()) {
                throw new Error("Visual Regression Tracker has not been started");
            }
            yield axios_1.default
                .patch(`${this.config.apiUrl}/builds/${this.buildId}`, {}, this.axiosConfig)
                .then(this.handleResponse)
                .catch(this.handleException);
        });
    }
    submitTestRunBase64(test) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = Object.assign({ buildId: this.buildId, projectId: this.projectId, branchName: this.config.branchName, baselineBranchName: this.config.baselineBranchName }, test);
            return axios_1.default
                .post(`${this.config.apiUrl}/test-runs`, data, this.axiosConfig)
                .then(this.handleResponse)
                .catch(this.handleException);
        });
    }
    submitTestRunMultipart(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const config = {
                headers: Object.assign(Object.assign(Object.assign({}, data.getHeaders()), { "Content-Length": data.getLengthSync() }), this.axiosConfig.headers),
            };
            return axios_1.default
                .post(`${this.config.apiUrl}/test-runs/multipart`, data, config)
                .then(this.handleResponse)
                .catch(this.handleException);
        });
    }
    handleResponse(response) {
        return __awaiter(this, void 0, void 0, function* () {
            return response.data;
        });
    }
    handleException(error) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!error.response) {
                throw new Error("No response from server");
            }
            const status = error.response.status;
            switch (status) {
                case 401:
                    throw new Error("Unauthorized");
                case 403:
                    throw new Error("Api key not authenticated");
                case 404:
                    throw new Error("Project not found");
                default:
                    throw new Error(JSON.stringify(error.response.data, null, "\t"));
            }
        });
    }
    getFormData(test) {
        if ((0, helpers_1.instanceOfTestRunBuffer)(test)) {
            return (0, helpers_1.bufferDtoToFormData)(Object.assign({ buildId: this.buildId, projectId: this.projectId, branchName: this.config.branchName, baselineBranchName: this.config.baselineBranchName }, test));
        }
        else if ((0, helpers_1.instanceOfTestRunMultipart)(test)) {
            return (0, helpers_1.multipartDtoToFormData)(Object.assign({ buildId: this.buildId, projectId: this.projectId, branchName: this.config.branchName, baselineBranchName: this.config.baselineBranchName }, test));
        }
        throw new Error("Invalid test run data");
    }
    /**
     * Submit test data to external VRT service
     *
     * @param test Test data to track
     * @param retryCount Retry count, default is 2
     * @returns
     */
    track(test, retryCount = 2) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.isStarted()) {
                throw new Error("Visual Regression Tracker has not been started");
            }
            let testRunResponse;
            if ((0, helpers_1.instanceOfTestRunBase64)(test)) {
                testRunResponse = yield (0, helpers_1.trackWithRetry)(() => this.submitTestRunBase64(test), retryCount, this.config.enableSoftAssert);
            }
            else {
                testRunResponse = yield (0, helpers_1.trackWithRetry)(() => this.submitTestRunMultipart(this.getFormData(test)), retryCount, this.config.enableSoftAssert);
            }
            return new testRunResult_1.default(testRunResponse, this.config.apiUrl);
        });
    }
}
exports.VisualRegressionTracker = VisualRegressionTracker;
